# Command Integration
Commands:
  _metadata:
    cline_tools:
      execution_environment:
        - "cline_cli"
        - "cline_repl"
        - "cline_api"
      command_prefix: "cline"
      usage: "cline <command> [options]"

  # Project Type Commands (from use_case_commands.yaml)
  project_type_commands:
    website:
      initialization:
        "#init-website":
          description: "Initialize website project"
          workflow:
            - "Setup static site generator"
            - "Configure build system"
            - "Initialize content structure"
            - "Setup deployment pipeline"
      templates:
        - type: "Landing Page"
          command: "#gen-landing"
          components:
            - "Hero section"
            - "Features grid"
            - "Testimonials"
            - "Contact form"
        - type: "Blog"
          command: "#gen-blog"
          components:
            - "Post listing"
            - "Categories"
            - "Search functionality"
            - "RSS feed"

    webapp:
      initialization:
        "#init-webapp":
          description: "Initialize web application"
          workflow:
            - "Setup frontend framework"
            - "Configure backend API"
            - "Initialize database"
            - "Setup authentication"
      architecture:
        frontend:
          "#init-frontend":
            framework_options:
              - "React"
              - "Vue"
              - "Angular"
            setup:
              - "Component structure"
              - "State management"
              - "Routing system"
        backend:
          "#init-backend":
            framework_options:
              - "Node.js/Express"
              - "Python/Django"
              - "Java/Spring"
            setup:
              - "API structure"
              - "Database models"
              - "Authentication system"

    mobile_app:
      initialization:
        "#init-mobile":
          description: "Initialize mobile application"
          workflow:
            - "Setup mobile framework"
            - "Configure native modules"
            - "Initialize state management"
            - "Setup build pipeline"
      platform_setup:
        cross_platform:
          "#init-react-native":
            setup:
              - "React Native configuration"
              - "Native modules"
              - "Navigation system"
          "#init-flutter":
            setup:
              - "Flutter configuration"
              - "Widget structure"
              - "State management"
        native:
          "#init-ios":
            setup:
              - "iOS project structure"
              - "CocoaPods setup"
              - "Swift configuration"
          "#init-android":
            setup:
              - "Android project structure"
              - "Gradle configuration"
              - "Kotlin setup"

  # Original Commands
  agent_commands:
    product_owner:
      requirements:
        - "#requirements-init"
        - "#feature-map"
        - "#roadmap-gen"

    ux_researcher:
      research:
        - "#research-init"
        - "#interview-analyze"
        - "#survey-process"

    system_architect:
      architecture:
        - "#arch-init"
        - "#uml-gen"
        - "#api-design"

    frontend_developer:
      ui_development:
        - "#ui-implement"
        - "#component-build"

    backend_developer:
      api_implementation:
        - "#api-implement"
        - "#service-build"

    database_developer:
      database:
        - "#schema-implement"
        - "#migration-gen"

    test_engineer:
      testing:
        - "#test-suite"
        - "#coverage-check"

  # Development Workflow Commands
  development_workflows:
    feature_development:
      "#feature-start":
        workflow:
          - "Create feature branch"
          - "Setup feature structure"
          - "Initialize tests"
          - "Update documentation"
      
      "#feature-implement":
        workflow:
          - "Implement functionality"
          - "Write tests"
          - "Update documentation"
          - "Create PR"

    testing:
      unit_testing:
        "#test-unit":
          workflow:
            - "Generate test cases"
            - "Implement tests"
            - "Run test suite"
            - "Generate coverage"
      
      integration_testing:
        "#test-integration":
          workflow:
            - "Setup test environment"
            - "Run integration tests"
            - "Validate components"
            - "Generate report"

    deployment:
      staging:
        "#deploy-staging":
          workflow:
            - "Build application"
            - "Run tests"
            - "Deploy to staging"
            - "Run smoke tests"
      
      production:
        "#deploy-prod":
          workflow:
            - "Verify staging"
            - "Run security checks"
            - "Deploy to production"
            - "Monitor metrics"

  # System Commands
  system_commands:
    project_management:
      - "#init-project"
      - "#init-memory"
      - "#generate-project-structure"
      - "#organize-root"

    version_control:
      - "#init-git"
      - "#commit"

    documentation:
      - "#docs-init"
      - "#gen-docs"

  # Command Integration
  command_integration:
    workflow_hooks:
      pre_command:
        - "Validate prerequisites"
        - "Check permissions"
        - "Load context"
      
      post_command:
        - "Update context"
        - "Generate logs"
        - "Notify relevant agents"

    error_handling:
      on_failure:
        - "Log error details"
        - "Notify relevant agents"
        - "Attempt recovery"
        - "Update status" 