# Context Management System
context_management:
  # Core Configuration
  config:
    version: "5.0.0"
    parser:
      type: "typescript"
      options:
        sourceType: "module"
        plugins: ["typescript", "jsx"]
    
    rules:
      contextScope:
        enabled: true
        level: "error"
        options:
          maxDepth: 3
          allowedScopes: ["global", "module", "function"]

  # Context Provider Configuration
  provider:
    engine:
      type: "llm"
      model: "gpt-4"
      temperature: 0.2
      maxTokens: 2048
    
    storage:
      type: "vector"
      engine: "chromadb"
      collections:
        code:
          name: "code_context"
          schema:
            - name: "content"
              type: "text"
            - name: "metadata"
              type: "json"
            - name: "embedding"
              type: "vector"

  # Workflow Context Management
  workflow_contexts:
    planning_workflow:
      requirements:
        command: "#requirements-init"
        workflow:
          - "Generate code knowledge graph"
          - "Load requirements context"
          - "Update specifications"
          - "Generate documentation"
      
      architecture:
        command: "#arch-init"
        workflow:
          - "Generate code knowledge graph"
          - "Load architecture context"
          - "Update system design"
          - "Generate diagrams"
    
    development_workflow:
      implementation:
        command: "#dev-init"
        workflow:
          - "Generate code knowledge graph"
          - "Load development context"
          - "Update codebase"
          - "Generate documentation"
      
      testing:
        command: "#test-init"
        workflow:
          - "Generate code knowledge graph"
          - "Load testing context"
          - "Update test suite"
          - "Generate reports"

    feature_workflow:
      initialization:
        command: "#feature-init"
        workflow:
          - "Generate code knowledge graph"
          - "Create feature branch"
          - "Setup feature structure"
          - "Initialize tests"
          - "Setup documentation"
      
      development:
        command: "#feature-dev"
        workflow:
          - "Generate code knowledge graph"
          - "Implement functionality"
          - "Write tests"
          - "Update documentation"
          - "Create PR"

  # Context Operations Management
  operations_management:
    workflow_initialization:
      project_init:
        command: "#init-context"
        workflow:
          - "Create context structure"
          - "Initialize vector store"
          - "Generate code knowledge graph"
          - "Setup persistence"
          - "Configure access"
      
      code_knowledge_graph:
        command: "#generate-knowledge-graph"
        workflow:
          - "Analyze project structure"
          - "Generate dependency graph"
          - "Optimize for LLM context"
          - "Save knowledge graph"
          - "Update context metadata"
        hooks:
          pre_workflow:
            - "Check for existing graph"
            - "Validate project structure"
          post_workflow:
            - "Update context metadata"
            - "Notify dependent workflows"
      
      workflow_init:
        command: "#init-workflow"
        workflow:
          - "Generate code knowledge graph"
          - "Load workflow templates"
          - "Configure workflow steps"
          - "Setup monitoring"
          - "Initialize tracking"

    workflow_maintenance:
      context_update:
        command: "#update-workflow"
        workflow:
          - "Generate code knowledge graph"
          - "Check for changes"
          - "Update workflow states"
          - "Sync with agents"
          - "Update documentation"
      
      context_cleanup:
        command: "#cleanup-workflow"
        workflow:
          - "Archive old workflows"
          - "Optimize storage"
          - "Update indexes"
          - "Generate reports"
          - "Update knowledge graph"

  # Knowledge Graph Integration
  knowledge_graph_integration:
    triggers:
      - "New file creation"
      - "File modification"
      - "Dependency changes"
      - "Project structure changes"
    
    update_events:
      file_changes:
        - "Source code modifications"
        - "Component additions/removals"
        - "Dependency updates"
      
      project_changes:
        - "New feature branches"
        - "Merge operations"
        - "Project restructuring"
    
    optimization_rules:
      - "Remove unused nodes"
      - "Compress repeated patterns"
      - "Prioritize active components"
      - "Cache frequent queries"

  # Context Types and Schemas
  types:
    code_context:
      structure:
        file:
          - path: "string"
          - content: "string"
          - language: "string"
          - imports: "string[]"
          - exports: "string[]"
        
        function:
          - name: "string"
          - params: "object[]"
          - returnType: "string"
          - description: "string"
          - dependencies: "string[]"
        
        class:
          - name: "string"
          - methods: "object[]"
          - properties: "object[]"
          - inheritance: "string[]"
          - implementations: "string[]"

  # System Monitoring
  monitoring:
    metrics:
      - name: "Graph Generation Time"
        threshold: "30s"
        alert: true
      - name: "Context Query Latency"
        threshold: "200ms"
        alert: true
      - name: "Storage Usage"
        threshold: "80%"
        alert: true
    
    alerts:
      channels:
        - type: "console"
          priority: "high"
        - type: "log"
          priority: "medium"
    
    analytics:
      usage_patterns:
        - "Most accessed components"
        - "Query patterns"
        - "Update frequency"
      optimization_metrics:
        - "Cache hit rate"
        - "Query performance"
        - "Storage efficiency"

  # Security Management
  security:
    access_control:
      roles:
        admin:
          permissions: ["read", "write", "execute", "manage"]
        developer:
          permissions: ["read", "write", "execute"]
        viewer:
          permissions: ["read"]
    
    audit:
      logging:
        - "Graph generation events"
        - "Context access"
        - "System changes"
      retention:
        logs: "30d"
        graphs: "7d"