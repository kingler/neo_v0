<?xml version="1.0" encoding="UTF-8"?>
<prompt>
    <purpose>
        Implement a systematic Atomic Design System ensuring consistent component architecture, reusable patterns, and maintainable code structure. Generate a design system documentation website that showcases all components (atoms, molecules, organisms, templates, pages), design tokens, usage guidelines, as well as a comprehensive design specification template. The final output should combine atomic design principles, design tokens, UI components, accessibility guidelines, and design specs into a cohesive HTML or documentation output.
    </purpose>

    <chain-position>
        <step>3</step>
        <name>atomic_design_system</name>
        <type>ui_architecture</type>
        <previous>wireframe_generation</previous>
        <next>implementation_chain</next>
    </chain-position>

    <input>
        <sources>
            <source>
                <type>ux_design_doc</type>
                <format>markdown</format>
                <required>true</required>
            </source>
            <source>
                <type>component_diagrams</type>
                <format>plantuml</format>
                <required>true</required>
            </source>
            <source>
                <type>layout_specs</type>
                <format>json</format>
                <required>true</required>
            </source>
            <source>
                <type>wireframes</type>
                <format>svg</format>
                <required>true</required>
            </source>
            <source>
                <type>design_tokens</type>
                <format>json</format>
                <required>true</required>
            </source>
        </sources>
        <requirements>
            <format>json</format>
            <schema>
                <![CDATA[
                {
                    "design_system": {
                        "name": "string",
                        "version": "string",
                        "tokens": {
                            "colors": ["string"],
                            "typography": ["string"],
                            "spacing": ["string"],
                            "shadows": ["string"]
                        }
                    },
                    "components": {
                        "atoms": ["string"],
                        "molecules": ["string"],
                        "organisms": ["string"],
                        "templates": ["string"],
                        "pages": ["string"]
                    },
                    "implementation": {
                        "framework": "string",
                        "styling": "string",
                        "patterns": ["string"]
                    }
                }
                ]]>
            </schema>
        </requirements>
        <validation>
            <rules>
                <rule>
                    <type>design_tokens_exist</type>
                    <severity>error</severity>
                </rule>
                <rule>
                    <type>component_hierarchy</type>
                    <severity>error</severity>
                </rule>
                <rule>
                    <type>pattern_consistency</type>
                    <severity>warning</severity>
                </rule>
            </rules>
        </validation>
    </input>

    <output>
        <format>json</format>
        <schema>
            <![CDATA[
            {
                "components": {
                    "atoms": [{
                        "name": "string",
                        "type": "string",
                        "props": ["string"],
                        "variants": ["string"],
                        "usage": "string"
                    }],
                    "molecules": [{
                        "name": "string",
                        "atoms": ["string"],
                        "props": ["string"],
                        "behavior": "string"
                    }],
                    "organisms": [{
                        "name": "string",
                        "components": ["string"],
                        "layout": "string",
                        "state": "string"
                    }],
                    "templates": [{
                        "name": "string",
                        "layout": "string",
                        "organisms": ["string"],
                        "variants": ["string"]
                    }]
                },
                "documentation": {
                    "usage": ["string"],
                    "patterns": ["string"],
                    "examples": ["string"]
                },
                "validation": {
                    "passed": "boolean",
                    "issues": ["string"],
                    "warnings": ["string"]
                }
            }
            ]]>
        </schema>
        <destinations>
            <destination>implementation_chain</destination>
            <destination>documentation_chain</destination>
        </destinations>
    </output>

    <workflow>
        <steps>
            <step id="1">
                <name>analyze_design</name>
                <description>Analyze design system requirements and patterns</description>
                <validation>
                    <completeness>true</completeness>
                    <consistency>true</consistency>
                </validation>
            </step>
            <step id="2">
                <name>create_atoms</name>
                <description>Create atomic components</description>
                <outputs>
                    <output>
                        <type>base_components</type>
                        <description>Fundamental UI elements</description>
                    </output>
                </outputs>
            </step>
            <step id="3">
                <name>compose_molecules</name>
                <description>Compose molecular components</description>
                <validation>
                    <atom_usage>true</atom_usage>
                    <composition>true</composition>
                </validation>
            </step>
            <step id="4">
                <name>build_organisms</name>
                <description>Build organism components</description>
                <validation>
                    <component_integration>true</component_integration>
                    <state_management>true</state_management>
                </validation>
            </step>
            <step id="5">
                <name>create_templates</name>
                <description>Create page templates</description>
                <validation>
                    <layout_consistency>true</layout_consistency>
                    <responsiveness>true</responsiveness>
                </validation>
            </step>
        </steps>
    </workflow>

    <validation>
        <criteria>
            <criterion>
                <type>component_hierarchy</type>
                <description>Proper atomic design hierarchy</description>
                <severity>error</severity>
            </criterion>
            <criterion>
                <type>pattern_consistency</type>
                <description>Consistent design patterns</description>
                <severity>error</severity>
            </criterion>
            <criterion>
                <type>token_usage</type>
                <description>Consistent use of design tokens</description>
                <severity>warning</severity>
            </criterion>
            <criterion>
                <type>documentation_quality</type>
                <description>Complete component documentation</description>
                <severity>warning</severity>
            </criterion>
        </criteria>
    </validation>

    <commands>
        <command>
            <name>/create-component</name>
            <description>Create a new component</description>
            <parameters>
                <parameter>
                    <name>type</name>
                    <description>Component type (atom/molecule/organism/template)</description>
                </parameter>
                <parameter>
                    <name>name</name>
                    <description>Component name</description>
                </parameter>
            </parameters>
        </command>
        <command>
            <name>/component-status</name>
            <description>Check component creation status</description>
        </command>
        <command>
            <name>/validate-components</name>
            <description>Validate component hierarchy</description>
        </command>
    </commands>

    <!-- Incorporating Detailed Documentation from Prompt 2 and the Design Specification Template -->
    <documentation>
        <template name="design_system_documentation">
            <![CDATA[
            # Design System Documentation

            ## Document Control
            - **Project**: [Project name]
            - **Version**: [Version number]
            - **Last Updated**: [Date]
            - **Status**: [Draft/Review/Approved]

            ## Design System Overview
            ### System Architecture
            ```embed:plantuml
            @startuml
            package "Atomic Design System" {
              package "Atoms" {
                [Button]
                [Input]
                [Icon]
              }
              
              package "Molecules" {
                [Form Field]
                [Search Bar]
                [Navigation Item]
              }
              
              package "Organisms" {
                [Form]
                [Navigation Bar]
                [Card List]
              }
              
              package "Templates" {
                [Page Layout]
                [Section Template]
              }
              
              package "Pages" {
                [Home Page]
                [Detail Page]
              }
              
              Atoms --> Molecules
              Molecules --> Organisms
              Organisms --> Templates
              Templates --> Pages
            }
            @enduml
            ```

            ## Design Tokens
            ### Color System
            ```embed:svg
            {
              "type": "color_palette",
              "path": "assets/design_system/colors.svg",
              "title": "Color Palette"
            }
            ```

            ```typescript
            // Color Token Definitions
            export const colors = {
              primary: {
                50: "hsl(var(--primary-50))",
                100: "hsl(var(--primary-100))",
                // ... other shades
              },
              // ... other color categories
            }
            ```

            ### Typography System
            ```embed:svg
            {
              "type": "typography_scale",
              "path": "assets/design_system/typography.svg",
              "title": "Typography Scale"
            }
            ```

            ```typescript
            // Typography Token Definitions
            export const typography = {
              fontSizes: {
                xs: "0.75rem",
                sm: "0.875rem",
                base: "1rem",
                // ... other sizes
              },
              fontWeights: {
                normal: "400",
                medium: "500",
                bold: "700"
              },
              lineHeights: {
                tight: "1.25",
                normal: "1.5",
                loose: "1.75"
              }
            }
            ```

            ### Spacing System
            ```embed:svg
            {
              "type": "spacing_scale",
              "path": "assets/design_system/spacing.svg",
              "title": "Spacing Scale"
            }
            ```

            ```typescript
            // Spacing Token Definitions
            export const spacing = {
              px: "1px",
              0.5: "0.125rem",
              1: "0.25rem",
              // ... other spacing values
            }
            ```

            ## Atomic Components
            ### Atoms
            #### Button Component
            ```embed:code
            {
              "type": "component",
              "language": "tsx",
              "content": "
                import { Button } from '@/components/ui/button'
                // ... Button code ...
              "
            }
            ```

            ```embed:wireframe
            {
              "type": "component_states",
              "path": "assets/design_system/button_states.svg",
              "annotations": [
                {"id":"default","note":"Default state styling"},
                {"id":"hover","note":"Hover state interaction"}
              ]
            }
            ```

            ### Molecules
            #### Form Field Component
            ```embed:code
            {
              "type": "component",
              "language": "tsx",
              "content": "
                import { Input } from '@/components/ui/input'
                import { Label } from '@/components/ui/label'
                // ... FormField code ...
              "
            }
            ```

            ### Organisms
            #### Form Component
            ```embed:plantuml
            @startuml
            package "Form Organism" {
              [FormField Molecule] --> [Label Atom]
              [FormField Molecule] --> [Input Atom]
              [Form Organism] --> [FormField Molecule]
              [Form Organism] --> [Button Atom]
            }
            @enduml
            ```

            ## Layout System
            ### Grid System
            ```embed:svg
            {
              "type":"grid_system",
              "path":"assets/design_system/grid.svg",
              "title":"Grid System"
            }
            ```

            ### Responsive Breakpoints
            ```typescript
            // Breakpoint Definitions
            export const breakpoints = {
              sm: "640px",
              md: "768px",
              lg: "1024px",
              xl: "1280px",
              "2xl": "1536px"
            }
            ```

            ## Component Integration
            ### Shadcn UI Integration
            ```embed:code
            {
              "type":"configuration",
              "language":"ts",
              "content":"// components.json Shadcn UI config..."
            }
            ```

            ### Theme Configuration
            ```typescript
            // Theme Configuration
            export const theme = {
              extend: {
                colors: {
                  border: "hsl(var(--border))",
                  input: "hsl(var(--input))",
                  ring: "hsl(var(--ring))",
                  background: "hsl(var(--background))",
                  foreground: "hsl(var(--foreground))",
                  primary: {
                    DEFAULT: "hsl(var(--primary))",
                    foreground: "hsl(var(--primary-foreground))"
                  },
                  // ... other theme extensions
                }
              }
            }
            ```

            ## Usage Guidelines
            ### Component Usage
            ```embed:table
            {
              "type":"component_usage",
              "data":[
                ["Component","Context","Variants","Notes"],
                ["Button","CTAs, Forms","primary, secondary, ghost","Use primary for main actions"],
                ["Input","Forms, Search","text, number, date","Include proper validation"]
              ]
            }
            ```

            ### Accessibility Guidelines
            ```embed:checklist
            {
              "type":"accessibility",
              "items":["Use semantic HTML elements","Maintain color contrast ratios","Support keyboard navigation","Provide ARIA labels"]
            }
            ```

            ## Implementation Examples
            ### Template Examples
            ```embed:wireframe
            {
              "type":"template",
              "path":"assets/design_system/template_examples.svg",
              "title":"Template Implementation Examples"
            }
            ```

            ### Page Examples
            ```embed:wireframe
            {
              "type":"page",
              "path":"assets/design_system/page_examples.svg",
              "title":"Page Implementation Examples"
            }
            ```

            ## Version Control
            ### Component Versioning
            ```embed:table
            {
              "type":"versioning",
              "data":[
                ["Component","Version","Changes","Breaking"],
                ["Button","1.1.0","Added variant",false],
                ["Input","2.0.0","New API",true]
              ]
            }
            ```

            ## Documentation
            ### Component Documentation
            ```embed:code
            {
              "type":"documentation",
              "language":"mdx",
              "content":"# Button Component \\n\\n## Usage \\n```tsx\\n<Button variant='primary'>Click me</Button>\\n```"
            }
            ```

            ## Change Log
            | Version | Date | Changes | Author |
            |---------|------|---------|---------|
            | [Version] | [Date] | [Changes] | [Author] |

            # Design Specification Template

            ## Overview
            - **Feature**: [Feature name]
            - **Designer(s)**: [Designer names]
            - **Last Updated**: [Date]
            - **Status**: [Draft/In Review/Approved]

            ## Design Goals
            - **Primary Goal**: [Main design objective]
            - **User Needs**: [User needs being addressed]
            - **Success Metrics**: [How success will be measured]

            ## User Experience
            ### User Journey
            1. **Entry Point**: [How users discover/access feature]
            2. **Core Flow**: [Main user flow]
            3. **Exit Points**: [How users complete/exit feature]

            ### Interaction Design
            - **User Actions**: [Key user interactions]
            - **System Responses**: [How system responds]
            - **Error States**: [Error handling and messaging]

            ## Visual Design
            ### Components
            - **New Components**: [List of new UI components]
            - **Modified Components**: [Changes to existing components]
            - **Component States**: [Different states/variations]

            ### Style Guidelines
            - **Colors**: [Color scheme]
            - **Typography**: [Font usage]
            - **Spacing**: [Layout spacing]
            - **Icons**: [Icon usage]

            ## Responsive Design
            ### Desktop
            - **Layout**: [Desktop layout]
            - **Interactions**: [Desktop-specific interactions]
            - **Constraints**: [Desktop constraints]

            ### Mobile
            - **Layout**: [Mobile layout]
            - **Interactions**: [Mobile-specific interactions]
            - **Constraints**: [Mobile constraints]

            ## Accessibility
            ### Requirements
            - **WCAG Level**: [A/AA/AAA]
            - **Screen Readers**: [Screen reader support]
            - **Keyboard Navigation**: [Keyboard support]

            ### Implementation
            - **ARIA Labels**: [ARIA requirements]
            - **Color Contrast**: [Contrast requirements]
            - **Focus States**: [Focus management]

            ## Prototypes
            ### Low Fidelity
            - **Wireframes**: [Link to wireframes]
            - **Flow Diagrams**: [Link to flow diagrams]

            ### High Fidelity
            - **Design Mockups**: [Link to mockups]
            - **Interactive Prototype**: [Link to prototype]

            ## Design Validation
            ### Testing Plan
            - **Usability Testing**: [Testing approach]
            - **A/B Testing**: [Testing variants]
            - **Analytics**: [Metrics to track]

            ### Feedback Channels
            - **User Feedback**: [How to collect feedback]
            - **Stakeholder Review**: [Review process]
            - **Design Review**: [Design review process]

            ## Implementation Notes
            ### Development Guidelines
            - **Component Library**: [Component usage]
            - **CSS Architecture**: [CSS approach]
            - **Asset Management**: [Asset handling]

            ### Design Handoff
            - **Design Files**: [Link to design files]
            - **Asset Exports**: [Asset specifications]
            - **Documentation**: [Implementation docs]
            ]]>
        </template>
    </documentation>
</prompt>