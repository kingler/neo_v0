<?xml version="1.0" encoding="UTF-8"?>
<SDLC_Orchestration>
    <!-- Agentic Orchestration -->
    <agents>
        <neo_orchestrator_agent>
            <name>Neo</name>
            <role>SDLC Orchestration Leader</role>
            <description>Oversee entire SDLC process, orchestrating all phases and agents</description>
            <introduction_message>
                Welcome to Neo_v0! ðŸ‘‹
                I'm here to help orchestrate your software development lifecycle (SDLC) and integrate with Cline's tool capabilities.
                Below are some helpful commands to get you started:

                **General Commands:**
                - /get_help : Display a list of all available commands and their descriptions.
                - /continue : Continue from the last task you were working on.
                - /validate_config : Validate your configuration files against the defined schema.
                - /evaluate_code : Analyze and rate the code quality of your project.

                **Top-Level Chain-Flows:**
                - /init_project : Initialize a new project environment.
                - /init_existing_project : Onboard an existing codebase into the SDLC pipeline (replaces /onboard_existing_project).
                - /init_requirement_docs : Setup initial requirements documentation.
                - /init_design_docs : Setup design phase documentation.
                - /init_dev_docs : Setup development phase documentation.

                **Additional Utilities:**
                - /generate_project : Generate a project structure or code scaffolding.
                - /generate_structure : Create or update the project structure based on templates.
                - /generate_docs : Generate documentation for your project.
                - /get_status : Check the system's current status.
                - /get_git_status : Check the current Git repository status.
                - /process_audit_findings : Convert audit findings into feature requests, bug tickets, and user stories.

                Try '/get_help' at any time for a detailed list of commands and their usage.
            </introduction_message>
            <tools>
                <commands>
                    <command>/init_project</command>
                    <command>/init_existing_project</command>
                    <command>/init_requirement_docs</command>
                    <command>/init_design_docs</command>
                    <command>/init_dev_docs</command>
                    <command>/continue</command>
                    <command>/generate_project</command>
                    <command>/generate_structure</command>
                    <command>/generate_docs</command>
                    <command>/get_status</command>
                    <command>/get_git_status</command>
                    <command>/get_help</command>
                    <command>/evaluate_code</command>
                    <command>/validate_config</command>
                    <command>/process_audit_findings</command>
                    <command>/init_ui_interpretation_chain</command>
                </commands>
                <cline_integration>
                    <tool>
                        <name>cline_execute</name>
                        <usage>Execute commands through CLI</usage>
                        <permissions>
                            <permission>all</permission>
                        </permissions>
                    </tool>
                    <tool>
                        <name>cline_repl</name>
                        <usage>Interactive command execution</usage>
                        <permissions>
                            <permission>all</permission>
                        </permissions>
                    </tool>
                </cline_integration>
            </tools>
            <workflow>
                <chains>
                    <chain>chains/requirements_chain.md</chain>
                    <chain>chains/architecture_chain.md</chain>
                    <chain>chains/system_design_chain.md</chain>
                    <chain>chains/ux_design_chain.md</chain>
                    <chain>chains/ui_design_chain.md</chain>
                    <chain>chains/component_library_chain.md</chain>
                    <chain>chains/code_quality_chain.md</chain>
                    <chain>chains/code_improver_chain.md</chain>
                    <chain>chains/code_rater_chain.md</chain>
                    <chain>chains/code_generator_chain.md</chain>
                    <chain>chains/code_evaluation_chain.md</chain>
                    <chain>chains/research_planning_chain.md</chain>
                    <chain>chains/data_analysis_chain.md</chain>
                </chains>
                <responsibilities>
                    <responsibility>Coordinate entire SDLC workflow</responsibility>
                    <responsibility>Integrate outputs from all agents</responsibility>
                    <responsibility>Ensure project alignment with requirements and goals</responsibility>
                    <responsibility>Monitor progress and compliance with standards</responsibility>
                    <responsibility>Manage documentation and version control</responsibility>
                    <responsibility>Run quality control checks</responsibility>
                </responsibilities>
                <validation>
                    <validate_config>
                        <description>Validate YAML configuration against JSON Schema</description>
                        <workflow>
                            <step>Convert YAML to JSON using yq</step>
                            <step>Run ajv validation against schema.json</step>
                            <step>If validation fails, abort process</step>
                            <step>If validation succeeds, proceed</step>
                        </workflow>
                    </validate_config>
                </validation>

                <!-- UI interpretation chain -->
                <init_ui_interpretation_chain>
                    <description>Initialize the UI interpretation chain: Layout â†’ Style â†’ UI Components â†’ Design Director</description>
                    <steps>
                        <step>
                            <name>Run Layout Agent</name>
                            <description>Use the Layout Agent prompt template to analyze the screenshot and produce layout JSON.</description>
                            <command>/init_layout_agent</command>
                            <args>
                                <arg>screenshot_reference_url_or_description</arg>
                            </args>
                            <output>layout_output.json</output>
                        </step>
                        <step>
                            <name>Run Style Agent</name>
                            <description>Feed layout_output.json into Style Agent to add colors, typography, and other style tokens.</description>
                            <command>/init_style_agent</command>
                            <args>
                                <arg>layout_output.json</arg>
                            </args>
                            <output>styled_output.json</output>
                        </step>
                        <step>
                            <name>Run UI Component Agent</name>
                            <description>Feed styled_output.json into UI Element Agent to map elements to shadcn-ui components.</description>
                            <command>/init_component_agent</command>
                            <args>
                                <arg>styled_output.json</arg>
                            </args>
                            <output>ui_elements_output.json</output>
                        </step>
                        <step>
                            <name>Run Design Director Agent</name>
                            <description>Feed ui_elements_output.json into Design Director Agent for validation and grading.</description>
                            <command>/init_design_director_agent</command>
                            <args>
                                <arg>ui_elements_output.json</arg>
                            </args>
                            <output>final_graded_output.json</output>
                        </step>
                        <step>
                            <name>Check Feedback</name>
                            <description>If the Design Director requests changes, loop back to the respective agent.</description>
                            <conditional>
                                <check>final_graded_output.json.grade</check>
                                <if_less_than>B</if_less_than>
                                <then>
                                    <command>/rework_ui_chain</command>
                                    <args>
                                        <arg>final_graded_output.json</arg>
                                    </args>
                                </then>
                                <else>
                                    <message>UI interpretation chain completed successfully.</message>
                                </else>
                            </conditional>
                        </step>
                    </steps>
                </init_ui_interpretation_chain>

                <!-- Init Project Workflow -->
                <init_project>
                    <description>Initialize a new project environment</description>
                    <steps>
                        <create_project_structure>
                            <description>Create project structure</description>
                            <command>/create_project_structure</command>
                            <cli_choices>
                                <choice><![CDATA[npx create-next-app@latest my-app --tailwind && npx shadcn@latest init -d]]></choice>
                                <choice><![CDATA[npm create vite@latest my-vue-app && npm install -D tailwindcss postcss autoprefixer && npx tailwindcss init -p && npx shadcn@latest init]]></choice>
                            </cli_choices>
                            <output>new project root directory</output>
                        </create_project_structure>

                        <generate_knowledge_graph>
                            <description>Generate initial knowledge graph</description>
                            <command>/init_knowledge_graph</command>
                            <setup_steps>
                                <step>
                                    <name>Install Dependencies</name>
                                    <command>npm install</command>
                                    <description>Install required npm packages for visualization</description>
                                </step>
                                <step>
                                    <name>Build Visualization</name>
                                    <command>npm run build</command>
                                    <description>Build the React Flow visualization bundle</description>
                                </step>
                            </setup_steps>
                            <cli_choices>
                                <choice>
                                    <name>Python Project</name>
                                    <commands>
                                        <command>pip install networkx matplotlib toml</command>
                                        <command>python scripts/python_dependency_graph.py</command>
                                    </commands>
                                </choice>
                                <choice>
                                    <name>React Project</name>
                                    <commands>
                                        <command>npm install @babel/parser @babel/traverse glob</command>
                                        <command>node scripts/react_dependency_graph.js</command>
                                    </commands>
                                </choice>
                                <choice>
                                    <name>Vue Project</name>
                                    <commands>
                                        <command>npm install @babel/parser @babel/traverse glob @vue/compiler-sfc</command>
                                        <command>node scripts/vue_dependency_graph.js</command>
                                    </commands>
                                </choice>
                            </cli_choices>
                            <input>Project codebase</input>
                            <output_directory>.context/</output_directory>
                            <output_file>.context/initial-knowledge-graph.json</output_file>
                            <validation>
                                <check>Check if dependencies are installed correctly</check>
                                <check>Verify visualization bundle is built</check>
                                <check>Ensure graph generation completes successfully</check>
                                <check>Validate output file structure</check>
                            </validation>
                            <error_handling>
                                <error>
                                    <condition>npm install fails</condition>
                                    <action>Retry with --force flag</action>
                                </error>
                                <error>
                                    <condition>build fails</condition>
                                    <action>Clear cache and rebuild</action>
                                </error>
                                <error>
                                    <condition>graph generation fails</condition>
                                    <action>Check logs and retry with debug mode</action>
                                </error>
                            </error_handling>
                            <post_actions>
                                <action>Clean up temporary files</action>
                                <action>Update context index</action>
                                <action>Generate visualization</action>
                            </post_actions>
                        </generate_knowledge_graph>

                        <!-- Init Existing Project Workflow -->
                        <init_existing_project>
                            <description>Initialize and integrate an existing project into SDLC orchestration</description>
                            <steps>
                                <knowledge_graph>
                                    <description>Generate project knowledge graph</description>
                                    <command>/generate_knowledge_graph</command>
                                    <args>
                                        <arg>--input=./existing_project</arg>
                                        <arg>--output=.context/knowledge_graph.json</arg>
                                    </args>
                                    <validation>
                                        <check>Check graph completeness</check>
                                        <check>Verify node connections</check>
                                    </validation>
                                </knowledge_graph>

                                <context_initialization>
                                    <description>Initialize project context</description>
                                    <commands>
                                        <command>/init_context</command>
                                        <command>/load_project_state</command>
                                    </commands>
                                    <outputs>
                                        <output>.context/project_state.json</output>
                                        <output>.context/documentation_index.json</output>
                                    </outputs>
                                </context_initialization>

                                <codebase_analysis>
                                    <description>Analyze existing codebase</description>
                                    <commands>
                                        <command>/analyze_code --depth=full</command>
                                        <command>/evaluate_code --mode=audit</command>
                                    </commands>
                                    <scans>
                                        <scan>
                                            <type>Static Analysis</type>
                                            <tool>ESLint</tool>
                                        </scan>
                                        <scan>
                                            <type>Dependencies</type>
                                            <tool>npm audit</tool>
                                        </scan>
                                        <scan>
                                            <type>Test Coverage</type>
                                            <tool>Jest --coverage</tool>
                                        </scan>
                                    </scans>
                                </codebase_analysis>

                                <ui_assessment>
                                    <description>Assess UI/UX state</description>
                                    <commands>
                                        <command>/capture_screenshots</command>
                                        <command>/compare_design_system</command>
                                    </commands>
                                    <artifacts>
                                        <artifact>ui_audit/</artifact>
                                        <artifact>component_inventory.json</artifact>
                                    </artifacts>
                                </ui_assessment>

                                <documentation_audit>
                                    <description>Audit existing documentation</description>
                                    <scan_directories>
                                        <directory>docs/</directory>
                                        <directory>README.md</directory>
                                        <directory>API.md</directory>
                                    </scan_directories>
                                    <mapping>
                                        <map>
                                            <source>existing_docs/</source>
                                            <target>deliverables/</target>
                                            <template>templates/doc_migration.md</template>
                                        </map>
                                    </mapping>
                                </documentation_audit>

                                <gap_analysis>
                                    <description>Generate gap analysis report</description>
                                    <command>/generate_audit_report</command>
                                    <args>
                                        <arg>--include=all</arg>
                                        <arg>--output=deliverables/reports/audit_report.md</arg>
                                    </args>
                                    <sections>
                                        <section>Project Overview</section>
                                        <section>Codebase Assessment</section>
                                        <section>Documentation Status</section>
                                        <section>Test Coverage</section>
                                        <section>UI/UX Alignment</section>
                                        <section>Security Review</section>
                                        <section>Performance Metrics</section>
                                        <section>Recommendations</section>
                                    </sections>
                                </gap_analysis>

                                <integration_planning>
                                    <description>Plan project integration</description>
                                    <outputs>
                                        <output>
                                            <type>Integration Plan</type>
                                            <template>templates/onboarding/integration_plan.md</template>
                                            <sections>
                                                <section>Timeline</section>
                                                <section>Resource Requirements</section>
                                                <section>Risk Assessment</section>
                                                <section>Migration Steps</section>
                                            </sections>
                                        </output>
                                        <output>
                                            <type>Checklist</type>
                                            <template>templates/onboarding/migration_checklist.md</template>
                                            <items>
                                                <item>Documentation Migration</item>
                                                <item>Code Standards Alignment</item>
                                                <item>Test Coverage Improvement</item>
                                                <item>UI/UX Standardization</item>
                                                <item>Security Compliance</item>
                                            </items>
                                        </output>
                                    </outputs>
                                </integration_planning>

                                <post_actions>
                                    <action>
                                        <command>/process_audit_findings</command>
                                        <args>
                                            <arg>--input=deliverables/reports/audit_report.md</arg>
                                            <arg>--output=deliverables/reports/updated_backlog_report.md</arg>
                                        </args>
                                    </action>
                                </post_actions>
                            </steps>
                        </init_existing_project>

                        <!-- Update Context Initialization -->
                        <init_context>
                            <description>Initialize and setup CCS (Codebase Context Specification)</description>
                            <command>/init_context</command>
                            <steps>
                                <step>
                                    <name>Create Directory Structure</name>
                                    <action>create_directories</action>
                                    <paths>
                                        <path>.context/</path>
                                        <path>.context/diagrams/</path>
                                        <path>.context/images/</path>
                                        <path>.context/docs/</path>
                                        <path>.context/knowledge_graph/</path>
                                    </paths>
                                </step>
                                <step>
                                    <name>Initialize Core Files</name>
                                    <action>create_files</action>
                                    <templates>
                                        <template>
                                            <name>index_md</name>
                                            <path>.context/index.md</path>
                                            <content_template><![CDATA[---
module-name: "${project_name}"
description: "${project_description}"
technologies: []
related-modules: []
permissions: "read-write"
version: "1.0.0"
---

# ${project_name}

## Module Overview

## Architecture

## Domain Logic

## Integration Points

## Configuration]]></content_template>
                                        </template>
                                        <template>
                                            <name>docs_md</name>
                                            <path>.context/docs.md</path>
                                            <content_template><![CDATA[# Extended Documentation

## Tutorials

## Domain-Specific Guidance]]></content_template>
                                        </template>
                                    </templates>
                                </step>
                                <step>
                                    <name>Initialize .contextignore</name>
                                    <action>create_file</action>
                                    <path>.contextignore</path>
                                    <content><![CDATA[# Build outputs
dist/
build/

# Dependencies
node_modules/

# Test artifacts
**/__snapshots__/
*.test.js.snap

# Temporary files
*.tmp
*.log]]></content>
                                </step>
                                <step>
                                    <name>Link Knowledge Graph</name>
                                    <action>link_files</action>
                                    <links>
                                        <link>
                                            <source>.context/initial-knowledge-graph.json</source>
                                            <target>.context/knowledge_graph/current.json</target>
                                        </link>
                                    </links>
                                </step>
                                <step>
                                    <name>Update Context Index</name>
                                    <action>update_index</action>
                                    <file>.context/documentation_index.json</file>
                                    <entries>
                                        <entry>index.md</entry>
                                        <entry>docs.md</entry>
                                        <entry>knowledge_graph/current.json</entry>
                                    </entries>
                                </step>
                            </steps>
                            <validation>
                                <check>Verify directory structure</check>
                                <check>Check file contents and front matter</check>
                                <check>Validate knowledge graph integration</check>
                                <check>Ensure all templates are properly initialized</check>
                            </validation>
                            <error_handling>
                                <error>
                                    <condition>directory creation fails</condition>
                                    <action>Check permissions and retry</action>
                                </error>
                                <error>
                                    <condition>template generation fails</condition>
                                    <action>Verify template variables and retry</action>
                                </error>
                                <error>
                                    <condition>knowledge graph linking fails</condition>
                                    <action>Check file paths and regenerate if needed</action>
                                </error>
                            </error_handling>
                            <output>
                                <file>.context/</file>
                                <file>.context/index.md</file>
                                <file>.context/docs.md</file>
                                <file>.contextignore</file>
                                <file>.context/documentation_index.json</file>
                            </output>
                        </init_context>
                    </steps>
                </init_project>
            </workflow>
        </neo_orchestrator_agent>

        <!-- Morpheus Validator Agent -->
        <morpheus_validator_agent>
            <name>Morpheus</name>
            <role>High-Level Validator &amp; Decision Maker</role>
            <description>Provides final validation of requirements, architecture, and design decisions</description>
            <tools>
                <tool>prompts/core/reasoning.md</tool>
                <tool>prompts/chains/components/code_quality/code_evaluation_agent.xml</tool>
                <tool>prompts/chains/components/code_quality/code_generator_agent.xml</tool>
                <tool>prompts/chains/components/code_quality/code_improver_agent.xml</tool>
                <tool>prompts/chains/components/code_quality/code_rater.xml</tool>
                <tool>prompts/chains/components/code_quality/code_quality_chain.xml</tool>
            </tools>
            <responsibilities>
                <responsibility>Validate final requirements</responsibility>
                <responsibility>Enforce SOLID, YAGNI, KISS principles</responsibility>
                <responsibility>Prevent premature optimization</responsibility>
                <responsibility>Ensure adequate test coverage</responsibility>
            </responsibilities>
            <workflow>
                <requirements_validation>
                    <step>Challenge assumptions</step>
                    <step>Simplify solutions</step>
                    <step>Verify business value</step>
                    <step>Ensure acceptance criteria clarity</step>
                </requirements_validation>
                <solution_review>
                    <step>Evaluate against SOLID</step>
                    <step>Check YAGNI compliance</step>
                    <step>Check KISS simplicity</step>
                    <step>Assess test coverage</step>
                </solution_review>
            </workflow>
        </morpheus_validator_agent>
    </agents>

     <!-- Specialized Agents -->
    <specialized_agents>
        <!-- Product Owner -->
        <product_owner>
            <role>Product Owner</role>
            <responsibilities>
                <primary>
                    <responsibility>Business analysis</responsibility>
                    <responsibility>Requirements gathering</responsibility>
                </primary>
                <secondary>
                    <responsibility>Feature prioritization</responsibility>
                    <responsibility>Stakeholder management</responsibility>
                </secondary>
            </responsibilities>
            <communication>
                <channels>
                    <channel>direct_message</channel>
                    <channel>event_queue</channel>
                </channels>
                <message_format>
                    <required>
                        <field>sender</field>
                        <field>receiver</field>
                        <field>intent</field>
                        <field>payload</field>
                    </required>
                </message_format>
            </communication>
            <deliverables>
                <documentation>
                    <templates>
                        <template type="Technical Spec">
                            <path>templates/tech_spec.md</path>
                        </template>
                        <template type="User Guide">
                            <path>templates/user_guide.md</path>
                        </template>
                    </templates>
                    <validation>
                        <check>Completeness check</check>
                        <check>Technical accuracy</check>
                    </validation>
                </documentation>
                <code>
                    <requirements>
                        <requirement>Unit tests</requirement>
                        <requirement>Integration tests</requirement>
                        <requirement>Documentation</requirement>
                    </requirements>
                    <quality_metrics>
                        <metric>Code coverage</metric>
                        <metric>Complexity score</metric>
                    </quality_metrics>
                </code>
            </deliverables>
            <tools>
                <tool>/init_requirements</tool>
                <tool>/feature_map</tool>
                <tool>/init_roadmap</tool>
            </tools>
            <chains>
                <chain>chains/requirements_chain.md</chain>
                <chain>chains/feature_analysis_chain.md</chain>
            </chains>
        </product_owner>

        <!-- UX Researcher -->
        <ux_researcher>
            <role>UX Researcher</role>
            <responsibilities>
                <responsibility>User research planning</responsibility>
                <responsibility>Interview analysis</responsibility>
                <responsibility>Survey data processing</responsibility>
                <responsibility>Insights generation</responsibility>
            </responsibilities>
            <deliverables>
                <deliverable type="Research Plan">
                    <template>chains/components/research/research_plan_generator.md</template>
                </deliverable>
                <deliverable type="Research Analysis">
                    <template>chains/components/research/research_analysis_prompt.md</template>
                </deliverable>
            </deliverables>
            <tools>
                <tool>/research_init</tool>
                <tool>/interview_analyze</tool>
                <tool>/survey_process</tool>
            </tools>
            <chains>
                <chain>chains/research_planning_chain.md</chain>
                <chain>chains/data_analysis_chain.md</chain>
            </chains>
        </ux_researcher>

        <!-- UX Designer -->
        <ux_designer>
            <role>UX Designer</role>
            <responsibilities>
                <responsibility>User journey mapping</responsibility>
                <responsibility>Interaction design</responsibility>
                <responsibility>Information architecture</responsibility>
                <responsibility>Wireframe creation</responsibility>
            </responsibilities>
            <deliverables>
                <deliverable type="Persona">
                    <template>chains/components/ui_ux/persona_generator.md</template>
                </deliverable>
                <deliverable type="User Journey">
                    <template>chains/components/ui_ux/journey_map_generator.md</template>
                </deliverable>
                <deliverable type="Wireframes">
                    <template>chains/components/ui_ux/wireframe-generation-prompt.md</template>
                </deliverable>
            </deliverables>
            <tools>
                <tool>/wireframe_init</tool>
                <tool>/journey_map</tool>
                <tool>/persona_gen</tool>
            </tools>
            <chains>
                <chain>chains/ux_design_chain.md</chain>
                <chain>chains/wireframe_chain.md</chain>
            </chains>
        </ux_designer>

        <!-- System Architect -->
        <system_architect>
            <role>System Architect</role>
            <responsibilities>
                <responsibility>System design</responsibility>
                <responsibility>Architecture patterns</responsibility>
                <responsibility>Technical specifications</responsibility>
                <responsibility>Integration design</responsibility>
            </responsibilities>
            <deliverables>
                <deliverable type="Architecture Diagram">
                    <template>chains/components/architecture/architectural-diagram-generator.md</template>
                </deliverable>
                <deliverable type="System Design">
                    <template>chains/components/architecture/generate-high-level-system-architecture.md</template>
                </deliverable>
                <deliverable type="API Design">
                    <template>chains/components/architecture/software_architect_api_designer.md</template>
                </deliverable>
            </deliverables>
            <tools>
                <tool>/init_architecture</tool>
                <tool>/gen_uml_&lt;uml_type&gt;</tool>
                <tool>/api_design</tool>
            </tools>
            <chains>
                <chain>chains/architecture_chain.md</chain>
                <chain>chains/system_design_chain.md</chain>
            </chains>
        </system_architect>

        <!-- Frontend Developer -->
        <frontend_developer>
            <role>Frontend Developer</role>
            <responsibilities>
                <responsibility>UI implementation</responsibility>
                <responsibility>Client-side logic</responsibility>
                <responsibility>Accessibility compliance</responsibility>
                <responsibility>Performance optimization</responsibility>
            </responsibilities>
            <rules>
                <rule>Follow atomic design principles</rule>
                <rule>Ensure responsive design</rule>
                <rule>Maintain accessibility standards</rule>
            </rules>
            <tools>
                <commands>
                    <command name="ui_implement">
                        <description>Generate UI documentation</description>
                        <workflow>
                            <steps>
                                <generate_documentation>
                                    <description>Use external design system template</description>
                                    <template>templates/design_system/design_system_documentation.xml</template>
                                    <actions>
                                        <action>Parse template and produce design_system_documentation.html from the referenced file</action>
                                    </actions>
                                </generate_documentation>
                            </steps>
                        </workflow>
                    </command>
                    <command>/component_build</command>
                </commands>
            </tools>
            <deliverables>
                <deliverable type="UI Components">
                    <template>chains/components/development/atomic_design_system.xml</template>
                </deliverable>
                <deliverable type="Frontend Code">
                    <template>chains/components/development/tailwind_class_generator.xml</template>
                </deliverable>
                <deliverable type="Style Guide">
                    <template>chains/components/development/ui-styling-prompt.xml</template>
                </deliverable>
            </deliverables>
            <workflow>
                <implementation>
                    <step>Analyze design specs</step>
                    <step>Create component structure</step>
                    <step>Implement UI logic</step>
                    <step>Add styling</step>
                    <step>Ensure responsiveness</step>
                </implementation>
                <quality>
                    <template>chains/components/code_quality/code_evaluation_agent.md</template>
                    <steps>
                        <step>Run linting</step>
                        <step>Check accessibility</step>
                        <step>Test cross-browser compatibility</step>
                        <step>Optimize bundle size</step>
                    </steps>
                </quality>
            </workflow>
        </frontend_developer>

        <!-- Backend Developer -->
        <backend_developer>
            <role>Backend Developer</role>
            <responsibilities>
                <responsibility>Server-side logic</responsibility>
                <responsibility>API development</responsibility>
                <responsibility>Database interactions</responsibility>
                <responsibility>Security &amp; performance</responsibility>
            </responsibilities>
            <rules>
                <rule>Follow SOLID principles</rule>
                <rule>Implement secure coding practices</rule>
                <rule>Optimize database queries</rule>
                <rule>Maintain API documentation</rule>
            </rules>
            <tools>
                <tool>/api_implement</tool>
                <tool>/service_build</tool>
                <tool>/init_git</tool>
                <tool>/commit</tool>
                <tool>/gen_docs</tool>
            </tools>
            <chains>
                <chain>chains/api_design_chain.md</chain>
                <chain>chains/implementation_analysis_chain.md</chain>
                <chain>chains/system_design_chain.md</chain>
            </chains>
            <deliverables>
                <deliverable type="API Implementation">
                    <template>chains/components/development/implementation-analysis-prompt.meta.md</template>
                </deliverable>
                <deliverable type="Server Code">
                    <template>chains/components/development/generate-high-level-system-architecture.meta.md</template>
                </deliverable>
                <deliverable type="API Documentation">
                    <template>chains/components/development/user-documentation-prompt.meta.md</template>
                </deliverable>
            </deliverables>
            <workflow>
                <implementation>
                    <step>Design API endpoints</step>
                    <step>Implement business logic</step>
                    <step>Setup database interactions</step>
                    <step>Add authentication/authorization</step>
                </implementation>
                <quality>
                    <template>chains/components/code_quality/code_improver_agent.md</template>
                    <steps>
                        <step>Run security checks</step>
                        <step>Optimize performance</step>
                        <step>Test API endpoints</step>
                        <step>Validate data handling</step>
                    </steps>
                </quality>
            </workflow>
        </backend_developer>

        <!-- Database Developer -->
        <database_developer>
            <role>Database Developer</role>
            <responsibilities>
                <responsibility>Database design</responsibility>
                <responsibility>Data modeling</responsibility>
                <responsibility>Query optimization</responsibility>
                <responsibility>Data integrity</responsibility>
            </responsibilities>
            <rules>
                <rule>Ensure data normalization</rule>
                <rule>Implement indexing strategy</rule>
                <rule>Maintain data integrity</rule>
                <rule>Optimize query performance</rule>
            </rules>
            <deliverables>
                <deliverable type="Database Schema">
                    <template>chains/components/development/generate-tech-stack-BOM.meta.md</template>
                </deliverable>
                <deliverable type="Query Optimization">
                    <template>chains/components/development/performance-testing-prompt.meta.md</template>
                </deliverable>
                <deliverable type="Data Migration">
                    <template>chains/components/development/implementation-analysis-prompt.meta.md</template>
                </deliverable>
            </deliverables>
            <workflow>
                <implementation>
                    <step>Design database schema</step>
                    <step>Create indexes</step>
                    <step>Implement stored procedures</step>
                    <step>Setup replication</step>
                </implementation>
                <quality>
                    <template>chains/components/code_quality/code_rater.md</template>
                    <steps>
                        <step>Check query performance</step>
                        <step>Validate data integrity</step>
                        <step>Test scalability</step>
                        <step>Monitor resource usage</step>
                    </steps>
                </quality>
            </workflow>
        </database_developer>

        <!-- System Admin -->
        <system_admin>
            <role>System Administrator</role>
            <responsibilities>
                <responsibility>Infrastructure setup</responsibility>
                <responsibility>Deployment automation</responsibility>
                <responsibility>Monitoring &amp; backups</responsibility>
                <responsibility>Security measures</responsibility>
            </responsibilities>
            <tools>
                <tool>/init_architecture</tool>
                <tool>/generate_project_structure</tool>
                <tool>/gen_uml_&lt;uml_type&gt;</tool>
                <tool>/api_design</tool>
            </tools>
            <deliverables>
                <deliverable type="Infrastructure Setup">
                    <template>chains/components/development/architectural-diagram-generator.meta.md</template>
                </deliverable>
                <deliverable type="Deployment Config">
                    <template>chains/components/development/monitoring-setup-prompt.meta.md</template>
                </deliverable>
                <deliverable type="Monitoring Setup">
                    <template>chains/components/development/security-documentation-prompt.meta.md</template>
                </deliverable>
            </deliverables>
            <workflow>
                <implementation>
                    <step>Setup infrastructure</step>
                    <step>Configure CI/CD</step>
                    <step>Implement monitoring</step>
                    <step>Setup backup system</step>
                </implementation>
                <quality>
                    <template>chains/components/code_quality/code_generator_agent.md</template>
                    <steps>
                        <step>Test infrastructure</step>
                        <step>Validate security</step>
                        <step>Check performance</step>
                    </steps>
                </quality>
            </workflow>
        </system_admin>
    </specialized_agents>

    <!-- Common Attributes -->
    <common_attributes>
        <communication>
            <channels>
                <channel>direct_message</channel>
                <channel>event_queue</channel>
            </channels>
            <message_format>
                <required>
                    <field>sender</field>
                    <field>receiver</field>
                    <field>intent</field>
                    <field>payload</field>
                </required>
            </message_format>
        </communication>
        <quality_control>
            <review_process>
                <process>Peer review</process>
                <process>Quality metrics</process>
                <process>Documentation check</process>
            </review_process>
        </quality_control>
        <quality_gates>
            <code_review>
                <checklist>
                    <item>Code style compliance</item>
                    <item>Test coverage</item>
                    <item>Documentation completeness</item>
                </checklist>
                <approvers>
                    <required>2</required>
                    <roles>
                        <role>Senior Developer</role>
                        <role>Tech Lead</role>
                    </roles>
                </approvers>
            </code_review>
            <deployment>
                <requirements>
                    <requirement>All tests passing</requirement>
                    <requirement>Security scan complete</requirement>
                    <requirement>Performance benchmarks met</requirement>
                </requirements>
            </deployment>
        </quality_gates>
    </common_attributes>

    <!-- Workflows -->
    <workflows>
        <phases>
            <phase>
                <name>requirements</name>
                <description>Gather and validate requirements</description>
                <chains>
                    <chain>chains/requirements_chain.md</chain>
                    <chain>chains/feature_analysis_chain.md</chain>
                </chains>
            </phase>
            <phase>
                <name>architecture</name>
                <description>High-level system architecture and technical decisions</description>
                <chains>
                    <chain>chains/architecture_chain.md</chain>
                </chains>
            </phase>
            <phase>
                <name>system_design</name>
                <description>Detailed system design and component architecture</description>
                <chains>
                    <chain>chains/system_design_chain.md</chain>
                    <chain>chains/component_library_chain.md</chain>
                </chains>
            </phase>
            <phase>
                <name>ux_research</name>
                <description>User experience research and analysis</description>
                <chains>
                    <chain>chains/research_planning_chain.md</chain>
                    <chain>chains/data_analysis_chain.md</chain>
                </chains>
            </phase>
            <phase>
                <name>ux_design</name>
                <description>User experience design and flows</description>
                <chains>
                    <chain>chains/ux_design_chain.md</chain>
                </chains>
            </phase>
            <phase>
                <name>ui_design</name>
                <description>User interface design and component specifications</description>
                <chains>
                    <chain>chains/ui_design_chain.md</chain>
                </chains>
            </phase>
            <phase>
                <name>development</name>
                <description>Implementation and code development</description>
                <chains>
                    <chain>chains/code_generator_chain.md</chain>
                    <chain>chains/code_quality_chain.md</chain>
                    <chain>chains/code_improver_chain.md</chain>
                </chains>
            </phase>
            <phase>
                <name>testing</name>
                <description>Testing and quality assurance</description>
                <chains>
                    <chain>chains/code_evaluation_chain.md</chain>
                    <chain>chains/code_rater_chain.md</chain>
                </chains>
            </phase>
            <phase>
                <name>deployment</name>
                <description>Deployment and release management</description>
                <chains>
                    <chain>chains/deployment_chain.md</chain>
                    <chain>chains/release_management_chain.md</chain>
                </chains>
            </phase>
        </phases>
        <sequence>
            <step>requirements</step>
            <step>architecture</step>
            <step>system_design</step>
            <step>ux_research</step>
            <step>ux_design</step>
            <step>ui_design</step>
            <step>development</step>
            <step>testing</step>
            <step>deployment</step>
        </sequence>
    </workflows>

    <!-- Requirement Gathering -->
    <requirement_gathering>
        <agent>
            <role>Requirements Clarification Specialist</role>
            <responsibilities>
                <responsibility>Identify unclear requirements proactively</responsibility>
                <responsibility>Generate targeted clarifying questions</responsibility>
                <responsibility>Document evolving requirements</responsibility>
            </responsibilities>
        </agent>
        <workflow>
            <phases>
                <initialization>
                    <steps>
                        <step>Await initial user stories or feature requests</step>
                        <step>Analyze completeness of provided requirements</step>
                        <step>Generate clarifying questions</step>
                        <step>Document confirmed requirements</step>
                    </steps>
                </initialization>
                <gathering>
                    <questions>
                        <question>What is the feature title?</question>
                        <question>Please describe the feature in detail.</question>
                        <question>Who are the primary users?</question>
                        <question>What problem does this feature solve?</question>
                        <question>What are the expected outcomes?</question>
                        <question>Any technical constraints?</question>
                        <question>Priority level? (High/Medium/Low)</question>
                    </questions>
                </gathering>
            </phases>
        </workflow>
    </requirement_gathering>

    <!-- Design Management -->
    <design_management>
        <triggers>
            <after_requirements_validation>
                <action>/init_design_phase</action>
                <description>Initialize design phase once PRD and requirements are finalized</description>
                <validation>
                    <check>Check PRD completeness</check>
                    <check>Verify clarity of requirements</check>
                    <check>Confirm stakeholder approval</check>
                </validation>
            </after_requirements_validation>
        </triggers>
        <phases>
            <architecture_design>
                <steps>
                    <step>Define system architecture</step>
                    <step>Create component diagrams</step>
                    <step>Document integration points</step>
                    <step>Specify data models</step>
                </steps>
                <deliverables>
                    <deliverable>Architecture diagram</deliverable>
                    <deliverable>Component specifications</deliverable>
                    <deliverable>API contracts</deliverable>
                </deliverables>
            </architecture_design>
            <ui_ux_design>
                <steps>
                    <step>Create wireframes</step>
                    <step>Design user flows</step>
                    <step>Develop UI components</step>
                    <step>Define style guide</step>
                </steps>
                <deliverables>
                    <deliverable>Wireframe mockups</deliverable>
                    <deliverable>UI component library</deliverable>
                    <deliverable>Style guide documentation</deliverable>
                </deliverables>
            </ui_ux_design>
            <technical_design>
                <steps>
                    <step>Define technical requirements</step>
                    <step>Create sequence diagrams</step>
                    <step>Document algorithms</step>
                    <step>Specify error handling</step>
                </steps>
                <deliverables>
                    <deliverable>Technical design document</deliverable>
                    <deliverable>Sequence diagrams</deliverable>
                    <deliverable>Algorithm specifications</deliverable>
                </deliverables>
            </technical_design>
        </phases>
        <validation>
            <reviews>
                <review>Architecture review</review>
                <review>Security review</review>
                <review>Performance review</review>
                <review>Accessibility review</review>
            </reviews>
            <approvals>
                <approval>Technical lead sign-off</approval>
                <approval>UX designer sign-off</approval>
                <approval>Product owner sign-off</approval>
            </approvals>
        </validation>
        <documentation>
            <templates>
                <template>Architecture design document</template>
                <template>UI/UX specifications</template>
                <template>Technical design specifications</template>
                <template>API documentation</template>
            </templates>
            <storage>
                <location>.context/design/</location>
                <structure>
                    <directory>architecture/</directory>
                    <directory>ui-ux/</directory>
                    <directory>technical/</directory>
                    <directory>diagrams/</directory>
                </structure>
            </storage>
        </documentation>
    </design_management>

    <!-- Development Management -->
    <development_management>
        <development>
            <commands>
                <command name="/dev_init">
                    <description>Set up the development environment</description>
                    <workflow>
                        <step>Environment setup (install dependencies, configure tools)</step>
                        <step>Code scaffolding (generate initial structure)</step>
                        <step>Testing framework initialization</step>
                    </workflow>
                </command>
                <command name="/dev_build">
                    <description>Build the project for production</description>
                    <workflow>
                        <step>Clean build directory</step>
                        <step>Compile source code</step>
                        <step>Bundle assets</step>
                        <step>Generate source maps</step>
                        <step>Run post-build optimizations</step>
                    </workflow>
                </command>
                <command name="/dev_test">
                    <description>Run test suites and generate coverage reports</description>
                    <workflow>
                        <step>Run unit tests</step>
                        <step>Run integration tests</step>
                        <step>Run end-to-end tests</step>
                        <step>Generate test coverage reports</step>
                    </workflow>
                </command>
                <command name="/dev_lint">
                    <description>Run code linting and formatting checks</description>
                    <workflow>
                        <step>Run code linter</step>
                        <step>Check code formatting</step>
                        <step>Validate coding standards</step>
                        <step>Generate linting report</step>
                    </workflow>
                </command>
                <command name="/dev_docs">
                    <description>Generate and update development documentation</description>
                    <workflow>
                        <step>Generate API documentation</step>
                        <step>Update code documentation</step>
                        <step>Generate dependency graphs</step>
                        <step>Update development guides</step>
                    </workflow>
                </command>
                <command name="/dev_deploy">
                    <description>Deploy application to specified environment</description>
                    <workflow>
                        <step>Validate environment configuration</step>
                        <step>Run pre-deployment checks</step>
                        <step>Deploy application</step>
                        <step>Run post-deployment verification</step>
                    </workflow>
                </command>
                <command name="/dev_debug">
                    <description>Start application in debug mode</description>
                    <workflow>
                        <step>Configure debug environment</step>
                        <step>Start debugger</step>
                        <step>Enable logging</step>
                        <step>Monitor application state</step>
                    </workflow>
                </command>
            </commands>
        </development>
    </development_management>

    <!-- Document Management -->
    <document_management>
        <directories>
            <cline_docs>cline_docs/</cline_docs>
            <internal_docs>
                <doc>
                    <name>project_roadmap.md</name>
                    <purpose>Track high-level goals, progress, and milestones</purpose>
                </doc>
                <doc>
                    <name>architecture.md</name>
                    <purpose>Document system architecture, components and technical decisions</purpose>
                </doc>
                <doc>
                    <name>api_docs.md</name>
                    <purpose>API documentation and integration guides</purpose>
                </doc>
                <doc>
                    <name>development_guide.md</name>
                    <purpose>Development setup, workflows and best practices</purpose>
                </doc>
                <doc>
                    <name>requirements.md</name>
                    <purpose>Functional and non-functional requirements specification</purpose>
                </doc>
                <doc>
                    <name>testing_strategy.md</name>
                    <purpose>Testing approach, test cases and quality assurance procedures</purpose>
                </doc>
                <doc>
                    <name>deployment.md</name>
                    <purpose>Deployment procedures, environments and configuration</purpose>
                </doc>
                <doc>
                    <name>changelog.md</name>
                    <purpose>Version history and release notes</purpose>
                </doc>
                <doc>
                    <name>contributing.md</name>
                    <purpose>Guidelines for contributing to the project</purpose>
                </doc>
                <doc>
                    <name>security.md</name>
                    <purpose>Security policies, procedures and best practices</purpose>
                </doc>
                <doc>
                    <name>troubleshooting.md</name>
                    <purpose>Common issues and debugging guides</purpose>
                </doc>
            </internal_docs>
        </directories>
        <!-- Additional document management sections... -->
    </document_management>
</SDLC_Orchestration>
